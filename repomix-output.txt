This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-02T21:57:52.187Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
loup-garou-backend/
  templates/
    index.html
  .gitignore
  game_segments.py
  game_state.py
  player.py
  roles.py
  server.py
  server2.py
  socketio_instance.py
loup-garou-backend-go/
  go.mod
  go.sum
  server.go
loup-garou-frontend/
  app/
    (tabs)/
      _layout.tsx
      GameInterface.tsx
      index.tsx
      LoveAlert.tsx
      Seer.tsx
      Seer.tsx-E
      test-page.tsx
      test-page.tsx-E
      waiting-room.tsx
      waiting-room.tsx-E
      Werewolf.tsx
    _layout.tsx
    +not-found.tsx
  components/
    __tests__/
      __snapshots__/
        ThemedText-test.tsx.snap
      ThemedText-test.tsx
    roles/
      Cupidon.tsx
      Cupidon.tsx-E
      Hunter.tsx
      Hunter.tsx-E
    ui/
      IconSymbol.ios.tsx
      IconSymbol.tsx
      TabBarBackground.ios.tsx
      TabBarBackground.tsx
    Collapsible.tsx
    ExternalLink.tsx
    HapticTab.tsx
    HelloWave.tsx
    ParallaxScrollView.tsx
    ThemedText.tsx
    ThemedView.tsx
  constants/
    Colors.ts
    roles.ts
  hooks/
    useColorScheme.ts
    useColorScheme.web.ts
    useThemeColor.ts
  scripts/
    reset-project.js
  utils/
    config.js
    sockets.js
  .env
  .gitignore
  app.json
  babel.config.js
  global.css
  metro.config.js
  nativewind-env.d.ts
  notes.txt
  package.json
  README.md
  tailwind.config.js
  tsconfig.json
  types.ts
README.md

================================================================
Repository Files
================================================================

================
File: loup-garou-backend/templates/index.html
================
<!-- templates/index.html -->
<!doctype html>
<html>
  <head>
    <title>Werewolf Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
  </head>
  <body>
    <input id="nameInput" placeholder="Enter name" />
    <button onclick="joinGame()">Join Game</button>
    <button onclick="socket.emit('start_game')">Start Game</button>
    <div id="playerList"></div>

    <script>
      const socket = io();

      function joinGame() {
        const name = document.getElementById("nameInput").value;
        socket.emit("join", { name: name });
      }

      socket.on("players_update", (players) => {
        document.getElementById("playerList").innerHTML =
          "Players: " + players.join(", ");
      });
    </script>
  </body>
</html>

================
File: loup-garou-backend/.gitignore
================
.venv/
__pycache__/

================
File: loup-garou-backend/game_segments.py
================
import asyncio

from playsound import playsound

from game_state import GameState
from player import Player
from socketio_instance import socketio


class GameSegment:
    def narrate_intro(self):
        playsound("./assets/Intro.mp3")

    def cupidon_segment(self):
        playsound("./assets/Cupidon.mp3")
        self.alert_cupidon()

    def alert_cupidon(self):
        cupidon_sid = Player.get_cupid().sid
        socketio.emit(
            "cupidon_choice",
            {"message": "It's your turn, Cupidon!"},
            to=cupidon_sid,
        )

    def alert_lover(self, player1, player2):
        # playsound("./assets/Lover-start.mp3")

        socketio.emit("alert_lovers", {"lover": player2.name}, to=player1.sid)
        socketio.emit("alert_lovers", {"lover": player1.name}, to=player2.sid)

        # playsound("./assets/Lover-extra.mp3")

        socketio.emit("lover_can_close", to=player1.sid)
        socketio.emit("lover_can_close", to=player2.sid)

    def werewolf_segments(self):
        # playsound("./assets/Loup-garou-start.mp3")
        print("Werewolf segment")
        all_werewolfs = Player.get_all_werewolf_list()
        for werewolf in all_werewolfs:
            print("sending")
            socketio.emit(
                "werewolf_wake_up",
                {"message": "It's your turn, Werewolf!"},
                to=werewolf.sid,
            )
            print(werewolf.sid)

    def witch_segment(self):
        playsound("./assets/Sorciere.mp3")
        print("Witch segment")
        witch = Player.get_witch()
        socketio.emit(
            "witch_wake_up",
            {"message": "It's your turn, Witch!"},
            to=witch.sid,
        )

================
File: loup-garou-backend/game_state.py
================
from playsound import playsound

from socketio_instance import socketio


class GameState:

    def __init__(self):
        self.round = 0
        self.night_actions = {}
        self.pending_deaths = []
        self.confirmed_deaths = []

        # self.hunter_sid = None
        # self.hunter_choice = None
        #
        # self.cupidon_sid = None
        # self.cupidon_choice = None
        #
        # self.seer_sid = None

    def start_game(self, players):
        self.players = players
        self.players_alive = set(players.keys())
        self.round = 1
        # self.cupidon_segment()

    def narrate_intro(self):
        playsound("./assets/Intro.mp3")

    def process_night_action(self, player_id, action, target_id):
        self.night_actions[player_id] = {"action": action, "target": target_id}

    def process_vote(self, voter_id, target_id):
        if voter_id in self.players_alive:
            self.votes[voter_id] = target_id

    def cupidon_segment(self):
        playsound("./assets/Cupidon.mp3")
        print(self.cupidon_sid)
        socketio.emit(
            "cupidon_choice",
            {"message": "It's your turn, Cupidon!"},
            to=self.cupidon_sid,
        )

    def hunter_segment(self):
        playsound("./assets/Hunter-start.mp3")
        socketio.emit(
            "hunter_choice",
            {"message": "It's your turn, Hunter!"},
            to=self.hunter_sid,
        )

    def count_votes(self):
        if not self.votes:
            return None
        vote_counts = {}
        for target in self.votes.values():
            vote_counts[target] = vote_counts.get(target, 0) + 1
        return max(vote_counts.items(), key=lambda x: x[1])[0]

    def setCupidonSid(self, sid):
        self.cupidon_sid = sid

    def setHunterSid(self, sid):
        self.hunter_sid = sid

    def setCupidonChoice(self, sids):
        for player in self.players.values():
            if player.sid == sids[0]:
                player.lover = sids[1]
            elif player.sid == sids[1]:
                player.lover = sids[0]

    def setHunterChoice(self, sid):
        self.hunter_choice = sid

    def seer_segment(self):
        playsound("./assets/Seer-start.mp3")
        socketio.emit(
            "seer_choice",
            {"message": "It's your turn, Seer!"},
            to=self.seer_sid,
        )

    def setSeerSid(self, sid):
        self.seer_sid = sid

================
File: loup-garou-backend/player.py
================
import random

from socketio_instance import socketio


class Player:
    players = {}
    werewolfs = {}
    socket = None
    hunter_sid = None
    seer_sid = None
    cupidon_sid = None
    witch_sid = None
    witch_heal = True
    witch_kill = True

    def __init__(self, name, sid, role=None):
        self.name = name
        self.role = role
        self.sid = sid
        self.lover = None
        Player.players[sid] = self

    def to_dict(self):
        return {"name": self.name, "sid": self.sid, "role": self.role}

    def __repr__(self):
        role_name = self.role if self.role else "No role assigned"
        return f"{self.name} - {role_name}"

    def assign_role(self, role):
        self.role = role

    @classmethod
    def add_mock_players(cls, num_of_mock_players):
        mock_names = ["Alice", "Bob", "Charlie", "Eve"]
        for i, name in enumerate(mock_names, start=num_of_mock_players):
            mock_sid = str(i)
            Player(name=name, sid=mock_sid)

    @classmethod
    def get_all_players(cls):
        return cls.players

    @classmethod
    def get_all_players_list(cls):
        return list(cls.players.values())

    @classmethod
    def get_all_werewolf_list(cls):
        return list(cls.werewolfs.values())

    @classmethod
    def getPlayerByName(cls, name):
        for player in cls.players:
            if player.name == name:
                return player
        return None

    @classmethod
    def getPlayerBySid(cls, sid):
        return cls.players.get(sid, None)

    @classmethod
    def assign_player_roles(cls):
        roles_to_assign = ["werewolf"] * 2 + ["villager"] * (len(Player.players) - 2)

        random.shuffle(roles_to_assign)
        for player, role in zip(Player.players.values(), roles_to_assign):
            if player.name == "carl":
                player.assign_role("werewolf")
                Player.hunter_sid = player.sid
                Player.werewolfs[player.sid] = player
                Player.witch_sid = player.sid
            elif player.name == "reda":
                player.assign_role("werewolf")
                Player.cupidon_sid = player.sid
                Player.seer_sid = player.sid
                Player.werewolfs[player.sid] = player
            else:
                player.assign_role("villager")
            print(f"The player {player.name} is a {player.role}")
            socketio.emit("role_assigned", {"role": player.role}, to=player.sid)

    @classmethod
    def get_hunter(cls):
        for player in cls.players.values():
            if player.role == "Hunter":
                return player
        return None

    @classmethod
    def get_cupid(cls):
        return cls.players[cls.cupidon_sid]

    @classmethod
    def get_seer(cls):
        for player in cls.players.values():
            if player.role == "Seer":
                return player
        return None

    @classmethod
    def get_witch(cls):
        for player in cls.players.values():
            if player.role == "Witch":
                return player
        return None

================
File: loup-garou-backend/roles.py
================
class Role:
    def __init__(self, name, description, team):
        self.name = name
        self.description = description
        self.team = team

    def get_role_description(self, role_name):
        return roles[role_name].description


roles = {
    "werewolf": Role(
        "Werewolf",
        "Each night, vote with other werewolves to eat a villager",
        "Werewolf",
    ),
    "villager": Role(
        "Villager", "Vote during the day to eliminate suspected werewolves", "Villager"
    ),
    "seer": Role(
        "Seer",
        "Each night, check one player to reveal if they are a werewolf",
        "Villager",
    ),
    "cupidon": Role(
        "Cupidon",
        "On the first night, choose two players to fall in love. If one dies, the other dies too.",
        "Villager",
    ),
    "hunter": Role(
        "Hunter",
        "If you die, you can choose to take someone down with you",
        "Villager",
    ),
}

================
File: loup-garou-backend/server.py
================
# pyright: ignore[type]


import random
import time

from flask import Flask, jsonify, render_template, request
from flask_socketio import SocketIO, emit
from playsound import playsound

from game_state import GameState
from player import Player
from roles import roles

app = Flask(__name__)
socketio = SocketIO(app, cors_allow_origin="*")

players = {}
game_state = GameState(socketio)
lover_alert_counter = 0


def role_assignment(num_players):
    if num_players < 6:
        num_werewolves = 1
    else:
        num_werewolves = 2

    # TODO: ajouter les roles manquants(chasseur, cupidon)
    roles_to_assign = ["werewolf"] * num_werewolves + ["villager"] * (
        num_players - num_werewolves
    )

    random.shuffle(roles_to_assign)
    return roles_to_assign


@socketio.on("add_player")
def handle_add_player(data):
    player_name = data["name"]
    sid = request.sid
    new_player = Player(name=player_name, sid=sid, role=None)
    players[sid] = new_player

    if len(players) == 1:
        mock_names = ["Alice", "Bob", "Charlie", "Eve"]
        for i, name in enumerate(mock_names, start=2):
            mock_sid = str(i)
            players[mock_sid] = Player(name=name, sid=mock_sid)

    emit("player_data", {"name": new_player.name, "sid": new_player.sid}, room=sid)
    emit("players_update", [str(player) for player in players.values()], broadcast=True)

    print("Number of players:", len(players))
    if len(players) == 6:
        handle_assign_roles()
        game_state.start_game(players)
        print(Player.get_all_players())


def handle_assign_roles():
    print("Assigning roles")
    roles_to_assign = role_assignment(len(players))
    print(list(zip(players, roles_to_assign)))
    for player, role in zip(players.values(), roles_to_assign):
        if player.name == "carl":
            player.assign_role("hunter")
            game_state.setHunterSid(player.sid)
        elif player.name == "reda":
            player.assign_role("seer")
            game_state.setCupidonSid(player.sid)
            game_state.setSeerSid(player.sid)
        else:
            player.assign_role(role)
        print(f"The player {player.name} is a {player.role}")
        socketio.emit("role_assigned", {"role": player.role}, to=player.sid)


@app.route("/")
def index():
    return render_template("index.html")


@app.route("/players", methods=["GET"])
def get_players():
    all_players = [
        {"name": player.name, "sid": player.sid} for player in players.values()
    ]
    return jsonify({"players": all_players}), 200


@socketio.on("connect")
def handle_connect():
    print("Client connected")


@socketio.on("cupidon_selection_complete")
def handle_cupidon_selection(data):
    playsound("./assets/Cupidon-end.mp3")
    print("Cupidon selected:", data)
    sids = [player["sid"] for player in data]
    player_names = {player.sid: player.name for player in players.values()}

    game_state.setCupidonChoice(sids)
    playsound("./assets/Lover-start.mp3")
    socketio.emit("alert_lovers", {"lover": player_names[sids[1]]}, to=sids[0])
    socketio.emit("alert_lovers", {"lover": player_names[sids[0]]}, to=sids[1])


@socketio.on("lover_alert_closed")
def handle_lover_alert_closed():
    global lover_alert_counter
    lover_alert_counter += 1
    if lover_alert_counter == 2:
        playsound("./assets/Lover-extra.mp3")
        playsound("./assets/Lover-end.mp3")
        game_state.hunter_segment()


@socketio.on("hunter_selection")
def handle_hunter_selection(data):
    playsound("./assets/Hunter-end.mp3")
    print("Hunter selected:", data)
    player_name = data["name"]
    hunter_choice = Player.getPlayerByName(player_name)
    game_state.setHunterChoice(hunter_choice.sid)
    socketio.emit("alert_hunter", {"hunter": hunter_choice.name}, to=hunter_choice.sid)
    game_state.seer_segment()


@socketio.on("seer_check")
def handle_seerd_check(data):
    print(data)
    target_player = Player.getPlayerBySid(data)
    socketio.emit("role_reveal", {"role": target_player.role}, to=request.sid)


if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=5001, debug=True)

================
File: loup-garou-backend/server2.py
================
import random
import time

from flask import Flask, jsonify, render_template, request
from flask_socketio import SocketIO, emit
from playsound import playsound

from game_segments import GameSegment
from game_state import GameState
from player import Player
from roles import roles
from socketio_instance import app, socketio

game_state = GameState()
game_segment = GameSegment()
lover_alert_count = 0


@app.route("/players", methods=["GET"])
def get_players():
    all_players = [
        {"name": player.name, "sid": player.sid, "role": player.role}
        for player in Player.players.values()
    ]
    return jsonify({"players": all_players}), 200


@app.route("/get_werewolves", methods=["GET"])
def get_werewolf():
    werewolves = [
        {"name": werewolf.name, "sid": werewolf.sid}
        for werewolf in Player.get_all_werewolf_list()
    ]
    print(werewolves)
    return jsonify({"werewolves": werewolves}), 200


@socketio.on("add_player")
def handle_add_player(data):
    player_name = data["name"]
    sid = request.sid
    new_player = Player(name=player_name, sid=sid, role=None)
    all_players = Player.get_all_players()
    print("new player added")
    Player.add_mock_players(4)

    emit("player_data", {"name": new_player.name, "sid": new_player.sid}, to=sid)
    emit(
        "update_players_list",
        [str(player) for player in Player.players.values()],
        broadcast=True,
    )

    print("Number of players:", len(all_players))
    if len(all_players) == 6:
        Player.assign_player_roles()
        game_state.start_game
        # TODO: start with narration segment first
        # game_segment.narrate_intro()
        game_segment.cupidon_segment()


@socketio.on("cupidon_selection_complete")
def handle_cupidon_selection(data):
    # playsound("./assets/Cupidon-end.mp3")
    sids = [player["sid"] for player in data]

    player1 = Player.getPlayerBySid(sids[0])
    player2 = Player.getPlayerBySid(sids[1])

    player1.lover = sids[1]
    player2.lover = sids[0]

    Player.getPlayerBySid(sids[0]).lover = sids[1]
    Player.getPlayerBySid(sids[1]).lover = sids[0]
    game_segment.alert_lover(player1, player2)


@socketio.on("lover_alert_closed")
def handle_lover_alert_closed():
    global lover_alert_count
    lover_alert_count += 1
    if lover_alert_count == 2:
        playsound("./assets/Lover-end.mp3")
        game_segment.werewolf_segments()


@socketio.on("update_werewolf_selection_count")
def handle_werewolf_selection(data):
    print(data)
    all_werewolfs = Player.get_all_werewolf_list()
    for werewolf in all_werewolfs:
        socketio.emit(
            "new_selection_count",
            data,
            to=werewolf.sid,
        )


@socketio.on("werewolf_kill")
def handle_werewolf_kill(data):
    print(data)
    target = Player.getPlayerBySid(data)
    print(target)
    if target.lover is not None:
        lover = Player.getPlayerBySid(target.lover)
        game_state.pending_deaths.append(lover)
    print("target lover: ", target.lover)
    game_state.pending_deaths.append(target)


if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=5001, debug=True)

================
File: loup-garou-backend/socketio_instance.py
================
from flask import Flask
from flask_socketio import SocketIO

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

================
File: loup-garou-backend-go/go.mod
================
module backend

go 1.23.4

require (
	github.com/gofrs/uuid v4.0.0+incompatible // indirect
	github.com/gomodule/redigo v1.8.4 // indirect
	github.com/googollee/go-socket.io v1.7.0 // indirect
	github.com/gorilla/websocket v1.5.3 // indirect
	github.com/labstack/echo/v4 v4.13.3 // indirect
	github.com/labstack/gommon v0.4.2 // indirect
	github.com/mattn/go-colorable v0.1.13 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/valyala/bytebufferpool v1.0.0 // indirect
	github.com/valyala/fasttemplate v1.2.2 // indirect
	golang.org/x/crypto v0.31.0 // indirect
	golang.org/x/net v0.33.0 // indirect
	golang.org/x/sys v0.28.0 // indirect
	golang.org/x/text v0.21.0 // indirect
)

================
File: loup-garou-backend-go/go.sum
================
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/gofrs/uuid v4.0.0+incompatible h1:1SD/1F5pU8p29ybwgQSwpQk+mwdRrXCYuPhW6m+TnJw=
github.com/gofrs/uuid v4.0.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=
github.com/gomodule/redigo v1.8.4 h1:Z5JUg94HMTR1XpwBaSH4vq3+PNSIykBLxMdglbw10gg=
github.com/gomodule/redigo v1.8.4/go.mod h1:P9dn9mFrCBvWhGE1wpxx6fgq7BAeLBk+UUUzlpkBYO0=
github.com/googollee/go-socket.io v1.7.0 h1:ODcQSAvVIPvKozXtUGuJDV3pLwdpBLDs1Uoq/QHIlY8=
github.com/googollee/go-socket.io v1.7.0/go.mod h1:0vGP8/dXR9SZUMMD4+xxaGo/lohOw3YWMh2WRiWeKxg=
github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
github.com/labstack/echo/v4 v4.13.3 h1:pwhpCPrTl5qry5HRdM5FwdXnhXSLSY+WE+YQSeCaafY=
github.com/labstack/echo/v4 v4.13.3/go.mod h1:o90YNEeQWjDozo584l7AwhJMHN0bOC4tAfg+Xox9q5g=
github.com/labstack/gommon v0.4.2 h1:F8qTUNXgG1+6WQmqoUWnz8WiEU60mXVVw0P4ht1WRA0=
github.com/labstack/gommon v0.4.2/go.mod h1:QlUFxVM+SNXhDL/Z7YhocGIBYOiwB0mXm1+1bAPHPyU=
github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
github.com/valyala/fasttemplate v1.2.2 h1:lxLXG0uE3Qnshl9QyaK6XJxMXlQZELvChBOCmQD0Loo=
github.com/valyala/fasttemplate v1.2.2/go.mod h1:KHLXt3tVN2HBp8eijSv/kGJopbvo7S+qRAEEKiv+SiQ=
golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=
golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=
golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=
golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=
golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=
golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=
golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=

================
File: loup-garou-backend-go/server.go
================
package main

import (
    "log"
    "net/http"

    socketio "github.com/feederco/go-socket.io"
)

func main() {
    server, err := socketio.NewServer(nil)
    if err != nil {
        log.Fatal(err)
    }

    server.OnConnect("/", func(s socketio.Conn) error {
        log.Println("Connected:", s.ID())
        return nil
    })

    server.OnEvent("/", "add_player", func(s socketio.Conn, data map[string]interface{}) {
        name := data["name"].(string)
        s.Emit("player_data", map[string]interface{}{
            "name": name,
            "sid":  s.ID(),
        })
    })

    server.OnDisconnect("/", func(s socketio.Conn, reason string) {
        log.Println("Disconnected:", s.ID(), reason)
    })

    go server.Serve()
    defer server.Close()

    http.Handle("/socket.io/", server)
    log.Println("Serving at localhost:5001...")
    log.Fatal(http.ListenAndServe(":5001", nil))
}

================
File: loup-garou-frontend/app/(tabs)/_layout.tsx
================
import { Tabs } from "expo-router";
import React from "react";
import { Platform } from "react-native";

import { HapticTab } from "@/components/HapticTab";
import { IconSymbol } from "@/components/ui/IconSymbol";
import TabBarBackground from "@/components/ui/TabBarBackground";
import { Colors } from "@/constants/Colors";
import { useColorScheme } from "@/hooks/useColorScheme";

export default function TabLayout() {
  const colorScheme = useColorScheme();

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: Colors[colorScheme ?? "light"].tint,
        headerShown: false,
        tabBarButton: HapticTab,
        tabBarBackground: TabBarBackground,
        tabBarStyle: Platform.select({
          ios: {
            // Use a transparent background on iOS to show the blur effect
            position: "absolute",
          },
          default: {},
        }),
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          title: "Home",
          tabBarIcon: ({ color }) => (
            <IconSymbol size={28} name="house.fill" color={color} />
          ),
        }}
      />
    </Tabs>
  );
}

================
File: loup-garou-frontend/app/(tabs)/GameInterface.tsx
================
import { Text, View, TouchableOpacity, Button } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useLocalSearchParams, useRouter } from "expo-router";
import React, { useState, useEffect } from "react";
import { Player } from "../../types";
import { getRoleDescription } from "../../constants/roles";
import { socket } from "@/utils/sockets.js";
import Cupidon from "@/components/roles/Cupidon";
import Hunter from "@/components/roles/Hunter";
import LoveAlert from "./LoveAlert";
import * as Haptics from "expo-haptics";

const GameInterface: React.FC = () => {
  const router = useRouter();

  const [player, setPlayer] = useState<Player | null>(null);
  const [showDescription, setShowDescription] = useState(false);
  const [showCupidon, setShowCupidon] = useState(false);
  const [showHunter, setShowHunter] = useState(false);
  const [isInLove, setIsInLove] = useState(false);
  const [loverName, setLoverName] = useState("");
  const [showWerewolf, setShowWerewolf] = useState(false);

  const { player: playerString } = useLocalSearchParams() as { player: string };

  const handleCardPress = () => {
    setShowDescription(!showDescription);
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
  };

  useEffect(() => {
    console.log("Local search params", playerString);
    if (playerString) {
      const parsedPlayer: Player = JSON.parse(playerString);
      setPlayer(parsedPlayer);
    }
  }, []);

  useEffect(() => {
    const handleCupidonChoice = () => {
      setShowCupidon(true);
    };

    const handleIsInLove = (data: { lover: string }) => {
      setIsInLove(true);
      setLoverName(data.lover);
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)
        .then(() => console.log("Haptic feedback triggered"))
        .catch((error) =>
          console.error("Error triggering haptic feedback", error),
        );
    };

    const handleSeerChoice = () => {
      router.push("/(tabs)/Seer");
    };

    socket.once("cupidon_choice", handleCupidonChoice);
    socket.once("alert_lovers", handleIsInLove);
    //socket.on("seer_choice", handleSeerChoice);

    return () => {
      socket.off("cupidon_choice", handleCupidonChoice);
      socket.off("alert_lovers", handleIsInLove);
      //socket.off("seer_choice", handleSeerChoice);
    };
  }, []);

  useEffect(() => {
    const handleWerewolfWakeUp = () => {
      console.log("Werewolf woke up");
      console.log("Player", player);
      if (player) {
        console.log("Sending player to werewolf screen");
        try {
          router.push({
            pathname: "/(tabs)/Werewolf",
            params: { player: JSON.stringify(player) },
          });
          console.log("Router push completed");
        } catch (error) {
          console.error("Navigation error:", error);
        }
      }
    };

    console.log("listening for werewolf wake up");
    socket.on("werewolf_wake_up", handleWerewolfWakeUp);

    return () => {
      socket.off("werewolf_wake_up", handleWerewolfWakeUp);
    };
  }, [player]);

  return (
    <SafeAreaView className="flex-1 bg-gray-900 items-center justify-center">
      <Text className="text-white text-2xl mb-5">Game Interface</Text>
      <Text className="text-white text-lg mb-5">Player: {player?.name}</Text>

      <TouchableOpacity
        onPress={handleCardPress}
        className="active:scale-95 transform transition-all"
      >
        <View className="w-72 h-96 bg-gradient-to-br from-white to-gray-100 rounded-xl items-center justify-between p-6 shadow-xl border border-gray-200">
          <View className="w-full flex items-center">
            {!showDescription ? (
              <>
                <View className="w-16 h-16 bg-gray-900 rounded-full mb-4 items-center justify-center">
                  <Text className="text-white text-2xl">?</Text>
                </View>
                <Text className="text-gray-800 text-lg font-medium text-center">
                  Appuyez sur la carte pour révéler votre rôle
                </Text>
              </>
            ) : (
              <>
                <Text className="text-white text-2xl font-bold mb-4">
                  {player?.role?.toUpperCase()}
                </Text>
                <View className="border-t border-gray-200 w-full pt-4">
                  <Text className="text-gray-400 text-lg text-center leading-relaxed">
                    {player?.role ? getRoleDescription(player.role) : ""}
                  </Text>
                </View>
              </>
            )}
          </View>

          {loverName && (
            <LoveAlert
              visible={isInLove}
              onClose={() => {
                setIsInLove(false);
                socket.emit("lover_alert_closed");
                socket.emit("lover_alert_closed"); // TODO: Remove this line this is for testing purposes since we only have one player
              }}
              loverName={loverName}
            />
          )}

          {player && (
            <>
              <Cupidon
                visible={showCupidon}
                onClose={() => setShowCupidon(false)}
                cupidonName={player.name}
              />
              <Hunter
                visible={showHunter}
                onClose={() => setShowHunter(false)}
                hunterName={player.name}
              />
            </>
          )}
        </View>
      </TouchableOpacity>
    </SafeAreaView>
  );
};

export default GameInterface;

================
File: loup-garou-frontend/app/(tabs)/index.tsx
================
import axios from "axios";
import { useState, useEffect } from "react";
import { Link, useRouter } from "expo-router";
import { SafeAreaView } from "react-native-safe-area-context";
import { View, Text, TextInput, Button, ImageBackground } from "react-native";
import { Player } from "../../types";
import { socket } from "@/utils/sockets.js";

import "../../global.css";

export default function HomeScreen() {
  const router = useRouter();
  const [name, setName] = useState("");

  const handleJoinGame = () => {
    socket.emit("add_player", { name });
    socket.on("player_data", (playerData) => {
      router.push({
        pathname: "/(tabs)/waiting-room",
        params: { player: JSON.stringify(playerData) },
      });
    });
  };

  return (
    <ImageBackground
      source={require("../../assets/images/background-app-3.jpeg")}
      className="flex-1"
    >
      <SafeAreaView className="flex-1 justify-end pb-24 items-center">
        <View className="w-4/5 items-center bg-opacity-50 p-5 rounded-lg">
          <Text className="text-2xl text-white mb-5">Werewolf Game</Text>
          <TextInput
            className="w-full p-2 border border-gray-400 rounded mb-5 bg-white"
            placeholder="Enter your name"
            value={name}
            onChangeText={setName}
          />
          <Button title="Join Game" onPress={handleJoinGame} />
        </View>
      </SafeAreaView>
    </ImageBackground>
  );
}

================
File: loup-garou-frontend/app/(tabs)/LoveAlert.tsx
================
import React from "react";
import { SafeAreaView, Text, Button, Modal, View } from "react-native";
import { useState, useEffect } from "react";
import { socket } from "@/utils/sockets.js";

const LoveAlert = ({
  visible,
  onClose,
  loverName,
}: {
  visible: boolean;
  onClose: () => void;
  loverName: string;
}) => {
  const [isDisabled, setIsDisabled] = useState(true);

  useEffect(() => {
    socket.on("lover_can_close", () => {
      setIsDisabled(false);
    });
  }, []);
  return (
    <Modal visible={visible} animationType="slide" onRequestClose={onClose}>
      <SafeAreaView className="flex-1 bg-gray-900 items-center justify-center">
        <View className="w-72 h-96 bg-white rounded-lg items-center justify-center shadow-lg p-5">
          <Text className="text-black text-2xl mb-5">Love Alert</Text>
          <Text className="text-black text-lg mb-2">
            Vous etes en couple avec {loverName}!
          </Text>
          <Button title="Close" onPress={onClose} disabled={isDisabled} />
        </View>
      </SafeAreaView>
    </Modal>
  );
};

export default LoveAlert;

================
File: loup-garou-frontend/app/(tabs)/Seer.tsx
================
import React, { useEffect, useState } from "react";
import { useRouter } from "expo-router";
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  TouchableOpacity,
  Modal,
  View,
  Animated,
} from "react-native";
import axios from "axios";
import { socket } from "../../utils/sockets";
import { Player } from "../../types";
import { backendUrl } from "@/utils/config";

const Seer = ({ seerName }: { visible: boolean; seerName: string }) => {
  const router = useRouter();
  const [players, setPlayers] = useState<{ name: string; sid: string }[]>([]);
  const [selectedPlayer, setSelectedPlayer] = useState<string | null>(null);
  const [playerRole, setPlayerRole] = useState<string | null>(null);
  const [fadeAnim] = useState(new Animated.Value(0));
  const [visible, setVisible] = useState(true);
  const [confirmPressed, setConfirmPressed] = useState(false);

  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        const response = await axios.get(`${backendUrl}/players`);
        const allPlayers = response.data.players;
        setPlayers(
          allPlayers.filter((player: Player) => player.name !== seerName),
        );
      } catch (error) {
        console.error("Error fetching players:", error);
      }
    };
    fetchPlayers();
  }, []);

  const handlePlayerSelection = (sid: string) => {
    setSelectedPlayer(sid);
    setPlayerRole(null);
  };

  const handleSeerAction = async () => {
    if (selectedPlayer) {
      socket.emit("seer_check", selectedPlayer);

      socket.once("role_reveal", (data: { role: string }) => {
        setPlayerRole(data.role);
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 500,
          useNativeDriver: true,
        }).start();
      });
      setConfirmPressed(true);
    }
  };

  const handleOnClose = () => {
    console.log("closing seer modal");
    setVisible(false);
    router.push("/(tabs)/GameInterface");
  };

  const renderPlayer = ({ item }: { item: { name: string; sid: string } }) => {
    return (
      <TouchableOpacity
        onPress={() => handlePlayerSelection(item.sid)}
        style={{
          padding: 10,
          backgroundColor: selectedPlayer === item.sid ? "lightblue" : "white",
          marginVertical: 5,
          borderRadius: 5,
          borderWidth: 1,
          borderColor: "#ccc",
        }}
        disabled={confirmPressed}
      >
        <Text>{item.name}</Text>
      </TouchableOpacity>
    );
  };

  return (
    <Modal
      visible={visible}
      animationType="slide"
      onRequestClose={handleOnClose}
    >
      <SafeAreaView className="flex-1 p-5 bg-gray-100">
        <Text className="text-lg font-bold text-center my-2">
          Choisissez un joueur pour voir son rôle:
        </Text>
        <FlatList
          data={players}
          renderItem={renderPlayer}
          keyExtractor={(item) => item.sid}
        />
        {selectedPlayer && !playerRole && (
          <Button
            title="Voir le rôle du joueur"
            onPress={handleSeerAction}
            disabled={!selectedPlayer}
          />
        )}
        {playerRole && (
          <Animated.View
            style={{ opacity: fadeAnim }}
            className="mt-5 p-5 bg-white rounded shadow"
          >
            <Text className="text-lg font-bold text-center mb-2">
              The player's role is: {playerRole}
            </Text>
            <Button title="Confirm" onPress={handleOnClose} />
          </Animated.View>
        )}
      </SafeAreaView>
    </Modal>
  );
};

export default Seer;

================
File: loup-garou-frontend/app/(tabs)/Seer.tsx-E
================
import React, { useEffect, useState } from "react";
import { useRouter } from "expo-router";
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  TouchableOpacity,
  Modal,
  View,
  Animated,
} from "react-native";
import axios from "axios";
import { socket } from "../../utils/sockets";
import { Player } from "../../types";

const Seer = ({ seerName }: { visible: boolean; seerName: string }) => {
  const router = useRouter();
  const [players, setPlayers] = useState<{ name: string; sid: string }[]>([]);
  const [selectedPlayer, setSelectedPlayer] = useState<string | null>(null);
  const [playerRole, setPlayerRole] = useState<string | null>(null);
  const [fadeAnim] = useState(new Animated.Value(0));
  const [visible, setVisible] = useState(true);
  const [confirmPressed, setConfirmPressed] = useState(false);

  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        const response = await axios.get("http://192.168.2.215:5001/players");
        const allPlayers = response.data.players;
        setPlayers(
          allPlayers.filter((player: Player) => player.name !== seerName),
        );
      } catch (error) {
        console.error("Error fetching players:", error);
      }
    };
    fetchPlayers();
  }, []);

  const handlePlayerSelection = (sid: string) => {
    setSelectedPlayer(sid);
    setPlayerRole(null);
  };

  const handleSeerAction = async () => {
    if (selectedPlayer) {
      socket.emit("seer_check", selectedPlayer);

      socket.once("role_reveal", (data: { role: string }) => {
        setPlayerRole(data.role);
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 500,
          useNativeDriver: true,
        }).start();
      });
      setConfirmPressed(true);
    }
  };

  const handleOnClose = () => {
    console.log("closing seer modal");
    setVisible(false);
    router.push("/(tabs)/GameInterface");
  };

  const renderPlayer = ({ item }: { item: { name: string; sid: string } }) => {
    return (
      <TouchableOpacity
        onPress={() => handlePlayerSelection(item.sid)}
        style={{
          padding: 10,
          backgroundColor: selectedPlayer === item.sid ? "lightblue" : "white",
          marginVertical: 5,
          borderRadius: 5,
          borderWidth: 1,
          borderColor: "#ccc",
        }}
        disabled={confirmPressed}
      >
        <Text>{item.name}</Text>
      </TouchableOpacity>
    );
  };

  return (
    <Modal
      visible={visible}
      animationType="slide"
      onRequestClose={handleOnClose}
    >
      <SafeAreaView className="flex-1 p-5 bg-gray-100">
        <Text className="text-lg font-bold text-center my-2">
          Choisissez un joueur pour voir son rôle:
        </Text>
        <FlatList
          data={players}
          renderItem={renderPlayer}
          keyExtractor={(item) => item.sid}
        />
        {selectedPlayer && !playerRole && (
          <Button
            title="Voir le rôle du joueur"
            onPress={handleSeerAction}
            disabled={!selectedPlayer}
          />
        )}
        {playerRole && (
          <Animated.View
            style={{ opacity: fadeAnim }}
            className="mt-5 p-5 bg-white rounded shadow"
          >
            <Text className="text-lg font-bold text-center mb-2">
              The player's role is: {playerRole}
            </Text>
            <Button title="Confirm" onPress={handleOnClose} />
          </Animated.View>
        )}
      </SafeAreaView>
    </Modal>
  );
};

export default Seer;

================
File: loup-garou-frontend/app/(tabs)/test-page.tsx
================
import React, { useEffect, useState } from "react";
import { View, Text, TextInput, Button } from "react-native";
import { socket } from "@/utils/sockets";
import axios from "axios";

const TestSocketPage = () => {
  const [message, setMessage] = useState("");
  const [receivedMessage, setReceivedMessage] = useState("");

  useEffect(() => {
    socket.on("test_event", (data) => {
      setReceivedMessage(data.message);
    });

    return () => {
      socket.off("test_event");
    };
  }, []);

  const sendMessage = () => {
    socket.emit("test_event", { message });
  };

  const triggerServerEvent = async () => {
    try {
      const response = await axios.get(
        "backendUrl/trigger_test_event",
      );
      console.log(response.data.status);
    } catch (error) {
      console.error("Error triggering event:", error);
    }
  };

  return (
    <View className="flex-1 p-4 justify-center">
      <Text className="text-2xl mb-4 text-center">Socket.IO Test Page</Text>
      <TextInput
        className="h-10 border border-gray-400 mb-4 px-2"
        value={message}
        onChangeText={setMessage}
        placeholder="Enter message"
      />
      <Button title="Send Message" onPress={sendMessage} />
      <Button title="Trigger Server Event" onPress={triggerServerEvent} />
      <Text className="mt-4 text-lg text-center">
        Received Message: {receivedMessage}
      </Text>
    </View>
  );
};

export default TestSocketPage;

================
File: loup-garou-frontend/app/(tabs)/test-page.tsx-E
================
import React, { useEffect, useState } from "react";
import { View, Text, TextInput, Button } from "react-native";
import { socket } from "@/utils/sockets";
import axios from "axios";

const TestSocketPage = () => {
  const [message, setMessage] = useState("");
  const [receivedMessage, setReceivedMessage] = useState("");

  useEffect(() => {
    socket.on("test_event", (data) => {
      setReceivedMessage(data.message);
    });

    return () => {
      socket.off("test_event");
    };
  }, []);

  const sendMessage = () => {
    socket.emit("test_event", { message });
  };

  const triggerServerEvent = async () => {
    try {
      const response = await axios.get(
        "http://192.168.2.215:5001/trigger_test_event",
      );
      console.log(response.data.status);
    } catch (error) {
      console.error("Error triggering event:", error);
    }
  };

  return (
    <View className="flex-1 p-4 justify-center">
      <Text className="text-2xl mb-4 text-center">Socket.IO Test Page</Text>
      <TextInput
        className="h-10 border border-gray-400 mb-4 px-2"
        value={message}
        onChangeText={setMessage}
        placeholder="Enter message"
      />
      <Button title="Send Message" onPress={sendMessage} />
      <Button title="Trigger Server Event" onPress={triggerServerEvent} />
      <Text className="mt-4 text-lg text-center">
        Received Message: {receivedMessage}
      </Text>
    </View>
  );
};

export default TestSocketPage;

================
File: loup-garou-frontend/app/(tabs)/waiting-room.tsx
================
import React, { useEffect, useState } from "react";
import { SafeAreaView } from "react-native-safe-area-context";
import { Text, Button } from "react-native";
import axios from "axios";
import { useRouter } from "expo-router";
import { socket } from "@/utils/sockets.js";
import { Player } from "../../types";
import { useLocalSearchParams } from "expo-router";
import { backendUrl } from "@/utils/config";

const waitingRoom = () => {
  const { player: playerString } = useLocalSearchParams() as { player: string };
  const [player, setPlayer] = useState<Player>(JSON.parse(playerString));
  const [playerHasRole, setPlayerHasRole] = useState(false);

  const router = useRouter();
  const [players, setPlayers] = useState<Player[]>([]);
  const [startGame, setStartGame] = useState(false);
  const [updatePlayers, setUpdatePlayers] = useState(false);

  useEffect(() => {
    const getAllPlayers = async () => {
      try {
        const response = await axios.get(`${backendUrl}/players`);
        const playerData = response.data.players;
        setPlayers(playerData);
        setUpdatePlayers(false);
      } catch (error) {
        console.error(error);
      }
    };

    getAllPlayers();
  }, [updatePlayers]);

  useEffect(() => {
    socket.on("update_players_list", () => {
      setUpdatePlayers(true);
    });
  }, []);

  const assignRole = (data: { role: string }) => {
    const newPlayer = { ...player, role: data.role };
    setPlayer(newPlayer);
    setPlayerHasRole(true);
  };

  useEffect(() => {
    socket.on("role_assigned", (data) => {
      assignRole(data);
    });

    return () => {
      socket.off("assign_roles");
    };
  }, []);

  useEffect(() => {
    if (playerHasRole) {
      console.log("Sending player to game interface ", JSON.stringify(player));
      router.push({
        pathname: "/(tabs)/GameInterface",
        params: { player: JSON.stringify(player) },
      });
    }
  }, [playerHasRole]);

  return (
    <SafeAreaView>
      <Text className="text-white justify-center text-center">
        be patient dawg
      </Text>
      {players.length === 0 ? (
        <Text className="text-white justify-center text-center">
          You are the first player, waiting for others to join
        </Text>
      ) : (
        <Text className="text-white justify-center text-center">
          {players.map((player) => player.name).join(", ")} are waiting with you
        </Text>
      )}
    </SafeAreaView>
  );
};

export default waitingRoom;

================
File: loup-garou-frontend/app/(tabs)/waiting-room.tsx-E
================
import React, { useEffect, useState } from "react";
import { SafeAreaView } from "react-native-safe-area-context";
import { Text, Button } from "react-native";
import axios from "axios";
import { useRouter } from "expo-router";
import { socket } from "@/utils/sockets.js";
import { Player } from "../../types";
import { useLocalSearchParams } from "expo-router";

const waitingRoom = () => {
  const { player: playerString } = useLocalSearchParams() as { player: string };
  const [player, setPlayer] = useState<Player>(JSON.parse(playerString));
  const [playerHasRole, setPlayerHasRole] = useState(false);

  const router = useRouter();
  const [players, setPlayers] = useState<Player[]>([]);
  const [startGame, setStartGame] = useState(false);
  const [updatePlayers, setUpdatePlayers] = useState(false);

  useEffect(() => {
    const getAllPlayers = async () => {
      try {
        const response = await axios.get("http://192.168.2.215:5001/players");
        const playerData = response.data.players;
        setPlayers(playerData);
        setUpdatePlayers(false);
      } catch (error) {
        console.error(error);
      }
    };

    getAllPlayers();
  }, [updatePlayers]);

  useEffect(() => {
    socket.on("players_update", (data) => {
      setUpdatePlayers(true);
    });
  }, []);

  const assignRole = (data: { role: string }) => {
    const newPlayer = { ...player, role: data.role };
    setPlayer(newPlayer);
    setPlayerHasRole(true);
  };

  useEffect(() => {
    socket.on("role_assigned", (data) => {
      assignRole(data);
    });

    return () => {
      socket.off("assign_roles");
    };
  }, []);

  useEffect(() => {
    if (playerHasRole) {
      router.push({
        pathname: "/(tabs)/GameInterface",
        params: { player: JSON.stringify(player) },
      });
    }
  }, [playerHasRole]);

  return (
    <SafeAreaView>
      <Text className="text-white justify-center text-center">
        be patient dawg
      </Text>
      {players.length === 0 ? (
        <Text className="text-white justify-center text-center">
          You are the first player, waiting for others to join
        </Text>
      ) : (
        <Text className="text-white justify-center text-center">
          {players.map((player) => player.name).join(", ")} are waiting with you
        </Text>
      )}
    </SafeAreaView>
  );
};

export default waitingRoom;

================
File: loup-garou-frontend/app/(tabs)/Werewolf.tsx
================
import React, { useEffect, useState } from "react";
import { useRouter } from "expo-router";
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  TouchableOpacity,
  View,
  Alert,
} from "react-native";
import axios from "axios";
import { socket } from "@/utils/sockets";
import { Player } from "../../types";
import { backendUrl } from "@/utils/config";
import { useLocalSearchParams } from "expo-router";

const Werewolf = () => {
  const router = useRouter();
  const { player: playerString } = useLocalSearchParams() as { player: string };
  const [player, setPlayer] = useState<Player>(JSON.parse(playerString));
  const [playerSelection, setPlayerSelection] = useState<
    { name: string; sid: string }[]
  >([]);
  const [selectedPlayer, setSelectedPlayer] = useState<string | null>(null);
  const [otherWerewolvesVote, setOtherWerewolvesVote] = useState<{
    [key: string]: string;
  }>({});
  const [totalWerewolves, setTotalWerewolves] = useState<number>(0);

  useEffect(() => {
    if (playerString) {
      setPlayer(JSON.parse(playerString));
    }
  }, [playerString]);

  useEffect(() => {
    const getAllPlayers = async () => {
      try {
        const response = await axios.get(`${backendUrl}/players`);
        const playerData = response.data.players;
        const werewolfCount = playerData.filter(
          (p: Player) => p.role === "werewolf",
        ).length;
        const werewolveSelection = playerData.filter(
          (p: Player) => p.role !== "werewolf",
        );
        setTotalWerewolves(werewolfCount);
        setPlayerSelection(werewolveSelection);
      } catch (error) {
        console.error(error);
      }
    };

    if (player) {
      getAllPlayers();
    }

    socket.on(
      "new_selection_count",
      (data: { werewolf: string; name: string; vote: string }) => {
        setOtherWerewolvesVote((prev) => {
          const newVotes = {
            ...prev,
            [data.werewolf]: data.vote,
          };

          return newVotes;
        });
      },
    );

    return () => {
      socket.off("new_selection_count");
    };
  }, [player, totalWerewolves]);

  useEffect(() => {
    const allVotesEqual = () => {
      const votes = Object.values(otherWerewolvesVote);
      if (votes.length === 0 || votes.length < totalWerewolves) return false;
      if (votes.every((vote) => vote === votes[0])) {
        socket.emit("werewolf_kill", votes[0]);
        console.log("All werewolves agree on killing", votes[0]);
        router.push({
          pathname: "/(tabs)/GameInterface",
          params: { player: JSON.stringify(player) },
        });
      }
    };

    allVotesEqual();
  }, [otherWerewolvesVote, playerSelection]);

  const togglePlayerSelection = (sid: string, name: string) => {
    setSelectedPlayer(sid);
    socket.emit("update_werewolf_selection_count", {
      werewolf: player.name,
      name: name,
      vote: sid,
    });
  };

  const handleWerewolfSelection = () => {
    const chosenPlayer = playerSelection.find((p) => p.sid === selectedPlayer);
    socket.emit("werewolf_kill", chosenPlayer);
    router.push({
      pathname: "/(tabs)/GameInterface",
      params: { player: JSON.stringify(player) },
    });
  };

  const getVoteCount = (sid: string): number => {
    return Object.values(otherWerewolvesVote).filter((vote) => vote === sid)
      .length;
  };

  const allWerewolvesAgree = () => {
    const votes = Object.values(otherWerewolvesVote);
    return votes.length > 0 && votes.every((vote) => vote === selectedPlayer);
  };

  const renderPlayer = ({ item }: { item: { name: string; sid: string } }) => {
    const voteCount = getVoteCount(item.sid);

    return (
      <TouchableOpacity
        onPress={() => togglePlayerSelection(item.sid, item.name)}
        style={{
          padding: 10,
          backgroundColor: selectedPlayer === item.sid ? "lightblue" : "white",
          marginVertical: 5,
          borderRadius: 8,
        }}
      >
        <View
          style={{
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <Text style={{ fontSize: 16 }}>{item.name}</Text>
          <View
            style={{
              backgroundColor: "#e0e0e0",
              borderRadius: 12,
              padding: 4,
              minWidth: 24,
              alignItems: "center",
            }}
          >
            <Text style={{ fontSize: 14 }}>
              {voteCount}/{totalWerewolves}
            </Text>
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  return (
    <SafeAreaView className="flex-1 bg-gray-900 h-full w-full">
      <Text className="text-white justify-center text-center text-xl mb-4">
        Choisissez un joueur à tuer:
      </Text>
      {playerSelection && (
        <FlatList
          data={playerSelection}
          renderItem={renderPlayer}
          keyExtractor={(item) => item.sid}
          className="text-white"
        />
      )}
      <Button
        title="Confirm Selection"
        onPress={handleWerewolfSelection}
        disabled={!allWerewolvesAgree()}
      />
    </SafeAreaView>
  );
};

export default Werewolf;

================
File: loup-garou-frontend/app/_layout.tsx
================
import {
  DarkTheme,
  DefaultTheme,
  ThemeProvider,
} from "@react-navigation/native";
import { useFonts } from "expo-font";
import { Stack } from "expo-router";
import * as SplashScreen from "expo-splash-screen";
import { StatusBar } from "expo-status-bar";
import { useEffect } from "react";

import { useColorScheme } from "@/hooks/useColorScheme";

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const colorScheme = useColorScheme();
  const [loaded] = useFonts({
    SpaceMono: require("../assets/fonts/SpaceMono-Regular.ttf"),
  });

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return (
    <ThemeProvider value={colorScheme === "dark" ? DarkTheme : DefaultTheme}>
      <Stack>
        <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
        <Stack.Screen name="+not-found" />
      </Stack>
    </ThemeProvider>
  );
}

================
File: loup-garou-frontend/app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen doesn't exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

================
File: loup-garou-frontend/components/__tests__/__snapshots__/ThemedText-test.tsx.snap
================
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<Text
  style={
    [
      {
        "color": "#11181C",
      },
      {
        "fontSize": 16,
        "lineHeight": 24,
      },
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ]
  }
>
  Snapshot test!
</Text>
`;

================
File: loup-garou-frontend/components/__tests__/ThemedText-test.tsx
================
import * as React from 'react';
import renderer from 'react-test-renderer';

import { ThemedText } from '../ThemedText';

it(`renders correctly`, () => {
  const tree = renderer.create(<ThemedText>Snapshot test!</ThemedText>).toJSON();

  expect(tree).toMatchSnapshot();
});

================
File: loup-garou-frontend/components/roles/Cupidon.tsx
================
import React, { useEffect, useState } from "react";
import { useRouter } from "expo-router";
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  TouchableOpacity,
  Modal,
  View,
} from "react-native";
import axios from "axios";
import { socket } from "../../utils/sockets";
import { Player } from "../../types";
import { backendUrl } from "@/utils/config";

const Cupidon = ({
  visible,
  onClose,
  cupidonName,
}: {
  visible: boolean;
  onClose: () => void;
  cupidonName: string;
}) => {
  const router = useRouter();

  const [players, setPlayers] = useState<{ name: string; sid: string }[]>([]);
  const [selectedPlayers, setSelectedPlayers] = useState<string[]>([]);

  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        const response = await axios.get(`${backendUrl}/players`);
        const allPlayers = response.data.players;
        console.log("All players", allPlayers);
        setPlayers(
          allPlayers.filter((player: Player) => player.name !== cupidonName),
        );
      } catch (error) {
        console.error("Error fetching players:", error);
      }
    };

    fetchPlayers();
  }, []);

  const togglePlayerSelection = (sid: string) => {
    setSelectedPlayers((prevSelected) => {
      if (prevSelected.includes(sid)) {
        return prevSelected.filter((id) => id !== sid);
      } else if (prevSelected.length < 2) {
        return [...prevSelected, sid];
      } else {
        return prevSelected;
      }
    });
  };

  const handleCupidonSelection = (selectedPlayers: string[]) => {
    const chosenPlayers = players.filter((player) =>
      selectedPlayers.includes(player.sid),
    );
    socket.emit("cupidon_selection_complete", chosenPlayers);
    onClose();
    router.push("/(tabs)/GameInterface");
  };

  const renderPlayer = ({ item }: { item: { name: string; sid: string } }) => {
    return (
      <TouchableOpacity
        onPress={() => togglePlayerSelection(item.sid)}
        style={{
          padding: 10,
          backgroundColor: selectedPlayers.includes(item.sid)
            ? "lightblue"
            : "white",
          marginVertical: 5,
        }}
      >
        <Text>{item.name}</Text>
      </TouchableOpacity>
    );
  };

  return (
    <Modal visible={visible} animationType="slide" onRequestClose={onClose}>
      <SafeAreaView>
        <Text className="text-white justify-center text-center">
          Choose two players:
        </Text>

        <FlatList
          data={players}
          renderItem={renderPlayer}
          keyExtractor={(item) => item.sid}
        />
        <Button
          title="Confirm Selection"
          onPress={() => handleCupidonSelection(selectedPlayers)}
          disabled={selectedPlayers.length !== 2}
        />
      </SafeAreaView>
    </Modal>
  );
};

export default Cupidon;

================
File: loup-garou-frontend/components/roles/Cupidon.tsx-E
================
import React, { useEffect, useState } from "react";
import { useRouter } from "expo-router";
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  TouchableOpacity,
  Modal,
  View,
} from "react-native";
import axios from "axios";
import { socket } from "../../utils/sockets";
import { Player } from "../../types";

const Cupidon = ({
  visible,
  onClose,
  cupidonName,
}: {
  visible: boolean;
  onClose: () => void;
  cupidonName: string;
}) => {
  const router = useRouter();

  const [players, setPlayers] = useState<{ name: string; sid: string }[]>([]);
  const [selectedPlayers, setSelectedPlayers] = useState<string[]>([]);

  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        const response = await axios.get("http://192.168.2.215:5001/players");
        const allPlayers = response.data.players;
        setPlayers(
          allPlayers.filter((player: Player) => player.name !== cupidonName),
        );
      } catch (error) {
        console.error("Error fetching players:", error);
      }
    };

    fetchPlayers();
  }, []);

  const togglePlayerSelection = (sid: string) => {
    setSelectedPlayers((prevSelected) => {
      if (prevSelected.includes(sid)) {
        return prevSelected.filter((id) => id !== sid);
      } else if (prevSelected.length < 2) {
        return [...prevSelected, sid];
      } else {
        return prevSelected;
      }
    });
  };

  const handleCupidonSelection = (selectedPlayers: string[]) => {
    const chosenPlayers = players.filter((player) =>
      selectedPlayers.includes(player.sid),
    );
    socket.emit("cupidon_selection_complete", chosenPlayers);
    onClose();
    router.push("/(tabs)/GameInterface");
  };

  const renderPlayer = ({ item }: { item: { name: string; sid: string } }) => {
    return (
      <TouchableOpacity
        onPress={() => togglePlayerSelection(item.sid)}
        style={{
          padding: 10,
          backgroundColor: selectedPlayers.includes(item.sid)
            ? "lightblue"
            : "white",
          marginVertical: 5,
        }}
      >
        <Text>{item.name}</Text>
      </TouchableOpacity>
    );
  };

  return (
    <Modal visible={visible} animationType="slide" onRequestClose={onClose}>
      <SafeAreaView>
        <Text className="text-white justify-center text-center">
          Choose two players:
        </Text>
        <FlatList
          data={players}
          renderItem={renderPlayer}
          keyExtractor={(item) => item.sid}
        />
        <Button
          title="Confirm Selection"
          onPress={() => handleCupidonSelection(selectedPlayers)}
          disabled={selectedPlayers.length !== 2}
        />
      </SafeAreaView>
    </Modal>
  );
};

export default Cupidon;

================
File: loup-garou-frontend/components/roles/Hunter.tsx
================
import React, { useEffect, useState } from "react";
import { useRouter } from "expo-router";
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  TouchableOpacity,
  Modal,
  View,
} from "react-native";
import axios from "axios";
import { socket } from "../../utils/sockets";
import { Player } from "../../types";
import { backendUrl } from "@/utils/config";

const Hunter = ({
  visible,
  onClose,
  hunterName,
}: {
  visible: boolean;
  onClose: () => void;
  hunterName: string;
}) => {
  const router = useRouter();
  const [players, setPlayers] = useState<{ name: string; sid: string }[]>([]);
  const [selectedPlayer, setSelectedPlayer] = useState<string | null>(null);

  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        const response = await axios.get(`${backendUrl}/players`);
        const allPlayers = response.data.players;
        setPlayers(
          allPlayers.filter((player: Player) => player.name !== hunterName),
        );
      } catch (error) {
        console.error("Error fetching players:", error);
      }
    };
    fetchPlayers();
  }, []);

  const togglePlayerSelection = (sid: string) => {
    setSelectedPlayer(selectedPlayer === sid ? null : sid);
  };

  const handleHunterSelection = (selectedPlayer: string) => {
    const chosenPlayer = players.find(
      (player) => player.sid === selectedPlayer,
    );
    socket.emit("hunter_selection", chosenPlayer);
    onClose();
    router.push("/(tabs)/GameInterface");
  };

  const renderPlayer = ({ item }: { item: { name: string; sid: string } }) => {
    return (
      <TouchableOpacity
        onPress={() => togglePlayerSelection(item.sid)}
        style={{
          padding: 10,
          backgroundColor: selectedPlayer === item.sid ? "lightblue" : "white",
          marginVertical: 5,
        }}
      >
        <Text>{item.name}</Text>
      </TouchableOpacity>
    );
  };

  return (
    <Modal visible={visible} animationType="slide" onRequestClose={onClose}>
      <SafeAreaView>
        <Text className="text-white justify-center text-center">
          Choose a player to take down with you:
        </Text>
        <FlatList
          data={players}
          renderItem={renderPlayer}
          keyExtractor={(item) => item.sid}
        />
        <Button
          title="Confirm Selection"
          onPress={() =>
            selectedPlayer && handleHunterSelection(selectedPlayer)
          }
          disabled={!selectedPlayer}
        />
      </SafeAreaView>
    </Modal>
  );
};

export default Hunter;

================
File: loup-garou-frontend/components/roles/Hunter.tsx-E
================
import React, { useEffect, useState } from "react";
import { useRouter } from "expo-router";
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  TouchableOpacity,
  Modal,
  View,
} from "react-native";
import axios from "axios";
import { socket } from "../../utils/sockets";
import { Player } from "../../types";

const Hunter = ({
  visible,
  onClose,
  hunterName,
}: {
  visible: boolean;
  onClose: () => void;
  hunterName: string;
}) => {
  const router = useRouter();
  const [players, setPlayers] = useState<{ name: string; sid: string }[]>([]);
  const [selectedPlayer, setSelectedPlayer] = useState<string | null>(null);

  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        const response = await axios.get("http://192.168.2.215:5001/players");
        const allPlayers = response.data.players;
        setPlayers(
          allPlayers.filter((player: Player) => player.name !== hunterName),
        );
      } catch (error) {
        console.error("Error fetching players:", error);
      }
    };
    fetchPlayers();
  }, []);

  const togglePlayerSelection = (sid: string) => {
    setSelectedPlayer(selectedPlayer === sid ? null : sid);
  };

  const handleHunterSelection = (selectedPlayer: string) => {
    const chosenPlayer = players.find(
      (player) => player.sid === selectedPlayer,
    );
    socket.emit("hunter_selection", chosenPlayer);
    onClose();
    router.push("/(tabs)/GameInterface");
  };

  const renderPlayer = ({ item }: { item: { name: string; sid: string } }) => {
    return (
      <TouchableOpacity
        onPress={() => togglePlayerSelection(item.sid)}
        style={{
          padding: 10,
          backgroundColor: selectedPlayer === item.sid ? "lightblue" : "white",
          marginVertical: 5,
        }}
      >
        <Text>{item.name}</Text>
      </TouchableOpacity>
    );
  };

  return (
    <Modal visible={visible} animationType="slide" onRequestClose={onClose}>
      <SafeAreaView>
        <Text className="text-white justify-center text-center">
          Choose a player to take down with you:
        </Text>
        <FlatList
          data={players}
          renderItem={renderPlayer}
          keyExtractor={(item) => item.sid}
        />
        <Button
          title="Confirm Selection"
          onPress={() =>
            selectedPlayer && handleHunterSelection(selectedPlayer)
          }
          disabled={!selectedPlayer}
        />
      </SafeAreaView>
    </Modal>
  );
};

export default Hunter;

================
File: loup-garou-frontend/components/ui/IconSymbol.ios.tsx
================
import { SymbolView, SymbolViewProps, SymbolWeight } from 'expo-symbols';
import { StyleProp, ViewStyle } from 'react-native';

export function IconSymbol({
  name,
  size = 24,
  color,
  style,
  weight = 'regular',
}: {
  name: SymbolViewProps['name'];
  size?: number;
  color: string;
  style?: StyleProp<ViewStyle>;
  weight?: SymbolWeight;
}) {
  return (
    <SymbolView
      weight={weight}
      tintColor={color}
      resizeMode="scaleAspectFit"
      name={name}
      style={[
        {
          width: size,
          height: size,
        },
        style,
      ]}
    />
  );
}

================
File: loup-garou-frontend/components/ui/IconSymbol.tsx
================
// This file is a fallback for using MaterialIcons on Android and web.

import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { SymbolWeight } from 'expo-symbols';
import React from 'react';
import { OpaqueColorValue, StyleProp, ViewStyle } from 'react-native';

// Add your SFSymbol to MaterialIcons mappings here.
const MAPPING = {
  // See MaterialIcons here: https://icons.expo.fyi
  // See SF Symbols in the SF Symbols app on Mac.
  'house.fill': 'home',
  'paperplane.fill': 'send',
  'chevron.left.forwardslash.chevron.right': 'code',
  'chevron.right': 'chevron-right',
} as Partial<
  Record<
    import('expo-symbols').SymbolViewProps['name'],
    React.ComponentProps<typeof MaterialIcons>['name']
  >
>;

export type IconSymbolName = keyof typeof MAPPING;

/**
 * An icon component that uses native SFSymbols on iOS, and MaterialIcons on Android and web. This ensures a consistent look across platforms, and optimal resource usage.
 *
 * Icon `name`s are based on SFSymbols and require manual mapping to MaterialIcons.
 */
export function IconSymbol({
  name,
  size = 24,
  color,
  style,
}: {
  name: IconSymbolName;
  size?: number;
  color: string | OpaqueColorValue;
  style?: StyleProp<ViewStyle>;
  weight?: SymbolWeight;
}) {
  return <MaterialIcons color={color} size={size} name={MAPPING[name]} style={style} />;
}

================
File: loup-garou-frontend/components/ui/TabBarBackground.ios.tsx
================
import { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';
import { BlurView } from 'expo-blur';
import { StyleSheet } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

export default function BlurTabBarBackground() {
  return (
    <BlurView
      // System chrome material automatically adapts to the system's theme
      // and matches the native tab bar appearance on iOS.
      tint="systemChromeMaterial"
      intensity={100}
      style={StyleSheet.absoluteFill}
    />
  );
}

export function useBottomTabOverflow() {
  const tabHeight = useBottomTabBarHeight();
  const { bottom } = useSafeAreaInsets();
  return tabHeight - bottom;
}

================
File: loup-garou-frontend/components/ui/TabBarBackground.tsx
================
// This is a shim for web and Android where the tab bar is generally opaque.
export default undefined;

export function useBottomTabOverflow() {
  return 0;
}

================
File: loup-garou-frontend/components/Collapsible.tsx
================
import { PropsWithChildren, useState } from 'react';
import { StyleSheet, TouchableOpacity } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function Collapsible({ children, title }: PropsWithChildren & { title: string }) {
  const [isOpen, setIsOpen] = useState(false);
  const theme = useColorScheme() ?? 'light';

  return (
    <ThemedView>
      <TouchableOpacity
        style={styles.heading}
        onPress={() => setIsOpen((value) => !value)}
        activeOpacity={0.8}>
        <IconSymbol
          name="chevron.right"
          size={18}
          weight="medium"
          color={theme === 'light' ? Colors.light.icon : Colors.dark.icon}
          style={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}
        />

        <ThemedText type="defaultSemiBold">{title}</ThemedText>
      </TouchableOpacity>
      {isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  heading: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  content: {
    marginTop: 6,
    marginLeft: 24,
  },
});

================
File: loup-garou-frontend/components/ExternalLink.tsx
================
import { Link } from 'expo-router';
import { openBrowserAsync } from 'expo-web-browser';
import { type ComponentProps } from 'react';
import { Platform } from 'react-native';

type Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: string };

export function ExternalLink({ href, ...rest }: Props) {
  return (
    <Link
      target="_blank"
      {...rest}
      href={href}
      onPress={async (event) => {
        if (Platform.OS !== 'web') {
          // Prevent the default behavior of linking to the default browser on native.
          event.preventDefault();
          // Open the link in an in-app browser.
          await openBrowserAsync(href);
        }
      }}
    />
  );
}

================
File: loup-garou-frontend/components/HapticTab.tsx
================
import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';
import { PlatformPressable } from '@react-navigation/elements';
import * as Haptics from 'expo-haptics';

export function HapticTab(props: BottomTabBarButtonProps) {
  return (
    <PlatformPressable
      {...props}
      onPressIn={(ev) => {
        if (process.env.EXPO_OS === 'ios') {
          // Add a soft haptic feedback when pressing down on the tabs.
          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        }
        props.onPressIn?.(ev);
      }}
    />
  );
}

================
File: loup-garou-frontend/components/HelloWave.tsx
================
import { useEffect } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withTiming,
  withRepeat,
  withSequence,
} from 'react-native-reanimated';

import { ThemedText } from '@/components/ThemedText';

export function HelloWave() {
  const rotationAnimation = useSharedValue(0);

  useEffect(() => {
    rotationAnimation.value = withRepeat(
      withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),
      4 // Run the animation 4 times
    );
  }, []);

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${rotationAnimation.value}deg` }],
  }));

  return (
    <Animated.View style={animatedStyle}>
      <ThemedText style={styles.text}>👋</ThemedText>
    </Animated.View>
  );
}

const styles = StyleSheet.create({
  text: {
    fontSize: 28,
    lineHeight: 32,
    marginTop: -6,
  },
});

================
File: loup-garou-frontend/components/ParallaxScrollView.tsx
================
import type { PropsWithChildren, ReactElement } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  interpolate,
  useAnimatedRef,
  useAnimatedStyle,
  useScrollViewOffset,
} from 'react-native-reanimated';

import { ThemedView } from '@/components/ThemedView';
import { useBottomTabOverflow } from '@/components/ui/TabBarBackground';
import { useColorScheme } from '@/hooks/useColorScheme';

const HEADER_HEIGHT = 250;

type Props = PropsWithChildren<{
  headerImage: ReactElement;
  headerBackgroundColor: { dark: string; light: string };
}>;

export default function ParallaxScrollView({
  children,
  headerImage,
  headerBackgroundColor,
}: Props) {
  const colorScheme = useColorScheme() ?? 'light';
  const scrollRef = useAnimatedRef<Animated.ScrollView>();
  const scrollOffset = useScrollViewOffset(scrollRef);
  const bottom = useBottomTabOverflow();
  const headerAnimatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateY: interpolate(
            scrollOffset.value,
            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],
            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]
          ),
        },
        {
          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),
        },
      ],
    };
  });

  return (
    <ThemedView style={styles.container}>
      <Animated.ScrollView
        ref={scrollRef}
        scrollEventThrottle={16}
        scrollIndicatorInsets={{ bottom }}
        contentContainerStyle={{ paddingBottom: bottom }}>
        <Animated.View
          style={[
            styles.header,
            { backgroundColor: headerBackgroundColor[colorScheme] },
            headerAnimatedStyle,
          ]}>
          {headerImage}
        </Animated.View>
        <ThemedView style={styles.content}>{children}</ThemedView>
      </Animated.ScrollView>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    height: HEADER_HEIGHT,
    overflow: 'hidden',
  },
  content: {
    flex: 1,
    padding: 32,
    gap: 16,
    overflow: 'hidden',
  },
});

================
File: loup-garou-frontend/components/ThemedText.tsx
================
import { Text, type TextProps, StyleSheet } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedTextProps = TextProps & {
  lightColor?: string;
  darkColor?: string;
  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';
};

export function ThemedText({
  style,
  lightColor,
  darkColor,
  type = 'default',
  ...rest
}: ThemedTextProps) {
  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');

  return (
    <Text
      style={[
        { color },
        type === 'default' ? styles.default : undefined,
        type === 'title' ? styles.title : undefined,
        type === 'defaultSemiBold' ? styles.defaultSemiBold : undefined,
        type === 'subtitle' ? styles.subtitle : undefined,
        type === 'link' ? styles.link : undefined,
        style,
      ]}
      {...rest}
    />
  );
}

const styles = StyleSheet.create({
  default: {
    fontSize: 16,
    lineHeight: 24,
  },
  defaultSemiBold: {
    fontSize: 16,
    lineHeight: 24,
    fontWeight: '600',
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    lineHeight: 32,
  },
  subtitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  link: {
    lineHeight: 30,
    fontSize: 16,
    color: '#0a7ea4',
  },
});

================
File: loup-garou-frontend/components/ThemedView.tsx
================
import { View, type ViewProps } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedViewProps = ViewProps & {
  lightColor?: string;
  darkColor?: string;
};

export function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {
  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');

  return <View style={[{ backgroundColor }, style]} {...otherProps} />;
}

================
File: loup-garou-frontend/constants/Colors.ts
================
/**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

const tintColorLight = '#0a7ea4';
const tintColorDark = '#fff';

export const Colors = {
  light: {
    text: '#11181C',
    background: '#fff',
    tint: tintColorLight,
    icon: '#687076',
    tabIconDefault: '#687076',
    tabIconSelected: tintColorLight,
  },
  dark: {
    text: '#ECEDEE',
    background: '#151718',
    tint: tintColorDark,
    icon: '#9BA1A6',
    tabIconDefault: '#9BA1A6',
    tabIconSelected: tintColorDark,
  },
};

================
File: loup-garou-frontend/constants/roles.ts
================
export interface Role {
  name: string;
  description: string;
}

export const roles: { [key: string]: Role } = {
  werewolf: {
    name: "Loup-Garou",
    description:
      "Chaque nuit, votez avec les autres loups-garous pour dévorer un villageois",
  },
  villager: {
    name: "Villageois",
    description:
      "Votez pendant la journée pour éliminer les loups-garous suspects",
  },
  seer: {
    name: "Voyante",
    description:
      "Chaque nuit, inspectez un joueur pour découvrir s'il est un loup-garou",
  },
  cupidon: {
    name: "Cupidon",
    description:
      "La première nuit, choisissez deux joueurs qui tomberont amoureux. Si l'un meurt, l'autre meurt aussi.",
  },
  hunter: {
    name: "Chasseur",
    description:
      "Si vous mourez, vous pouvez immédiatement tuer un autre joueur en utilisant votre dernière balle",
  },
  witch: {
    name: "Sorcière",
    description:
      "Vous avez deux potions : une pour sauver un joueur tué par les loups-garous, une pour éliminer un joueur. Utilisable une seule fois chacune",
  },
  littleGirl: {
    name: "Petite Fille",
    description:
      "Chaque nuit, vous pouvez espionner les loups-garous, mais attention à ne pas vous faire repérer",
  },
};

export function getRoleDescription(roleName: string): string | undefined {
  const role = roles[roleName];
  return role ? role.description : undefined;
}

================
File: loup-garou-frontend/hooks/useColorScheme.ts
================
export { useColorScheme } from 'react-native';

================
File: loup-garou-frontend/hooks/useColorScheme.web.ts
================
import { useEffect, useState } from 'react';
import { useColorScheme as useRNColorScheme } from 'react-native';

/**
 * To support static rendering, this value needs to be re-calculated on the client side for web
 */
export function useColorScheme() {
  const [hasHydrated, setHasHydrated] = useState(false);

  useEffect(() => {
    setHasHydrated(true);
  }, []);

  const colorScheme = useRNColorScheme();

  if (hasHydrated) {
    return colorScheme;
  }

  return 'light';
}

================
File: loup-garou-frontend/hooks/useThemeColor.ts
================
/**
 * Learn more about light and dark modes:
 * https://docs.expo.dev/guides/color-schemes/
 */

import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function useThemeColor(
  props: { light?: string; dark?: string },
  colorName: keyof typeof Colors.light & keyof typeof Colors.dark
) {
  const theme = useColorScheme() ?? 'light';
  const colorFromProps = props[theme];

  if (colorFromProps) {
    return colorFromProps;
  } else {
    return Colors[theme][colorName];
  }
}

================
File: loup-garou-frontend/scripts/reset-project.js
================
#!/usr/bin/env node

/**
 * This script is used to reset the project to a blank state.
 * It moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example and creates a new /app directory with an index.tsx and _layout.tsx file.
 * You can remove the `reset-project` script from package.json and safely delete this file after running it.
 */

const fs = require("fs");
const path = require("path");

const root = process.cwd();
const oldDirs = ["app", "components", "hooks", "constants", "scripts"];
const newDir = "app-example";
const newAppDir = "app";
const newDirPath = path.join(root, newDir);

const indexContent = `import { Text, View } from "react-native";

export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
    </View>
  );
}
`;

const layoutContent = `import { Stack } from "expo-router";

export default function RootLayout() {
  return <Stack />;
}
`;

const moveDirectories = async () => {
  try {
    // Create the app-example directory
    await fs.promises.mkdir(newDirPath, { recursive: true });
    console.log(`📁 /${newDir} directory created.`);

    // Move old directories to new app-example directory
    for (const dir of oldDirs) {
      const oldDirPath = path.join(root, dir);
      const newDirPath = path.join(root, newDir, dir);
      if (fs.existsSync(oldDirPath)) {
        await fs.promises.rename(oldDirPath, newDirPath);
        console.log(`➡️ /${dir} moved to /${newDir}/${dir}.`);
      } else {
        console.log(`➡️ /${dir} does not exist, skipping.`);
      }
    }

    // Create new /app directory
    const newAppDirPath = path.join(root, newAppDir);
    await fs.promises.mkdir(newAppDirPath, { recursive: true });
    console.log("\n📁 New /app directory created.");

    // Create index.tsx
    const indexPath = path.join(newAppDirPath, "index.tsx");
    await fs.promises.writeFile(indexPath, indexContent);
    console.log("📄 app/index.tsx created.");

    // Create _layout.tsx
    const layoutPath = path.join(newAppDirPath, "_layout.tsx");
    await fs.promises.writeFile(layoutPath, layoutContent);
    console.log("📄 app/_layout.tsx created.");

    console.log("\n✅ Project reset complete. Next steps:");
    console.log(
      "1. Run `npx expo start` to start a development server.\n2. Edit app/index.tsx to edit the main screen.\n3. Delete the /app-example directory when you're done referencing it."
    );
  } catch (error) {
    console.error(`Error during script execution: ${error}`);
  }
};

moveDirectories();

================
File: loup-garou-frontend/utils/config.js
================
export const backendUrl = process.env.EXPO_PUBLIC_BACKEND_URL;

================
File: loup-garou-frontend/utils/sockets.js
================
import { io } from "socket.io-client";
import { backendUrl } from "@/utils/config";

export const socket = io(backendUrl, {
  autoConnect: true,
  transports: ["websocket"],
});

socket.on("connect", () => {
  console.log("Socket connected");
});

socket.on("connect_error", (error) => {
  console.log("Socket connection error:", error);
});

================
File: loup-garou-frontend/.env
================
EXPO_PUBLIC_BACKEND_URL=http://192.168.2.215:5001

================
File: loup-garou-frontend/.gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example
.env\n

================
File: loup-garou-frontend/app.json
================
{
  "expo": {
    "extra": {
      "ipAddr": "192.168.2.215"
    },
    "name": "loup-garou-frontend",
    "slug": "loup-garou-frontend",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}

================
File: loup-garou-frontend/babel.config.js
================
module.exports = function (api) {
  api.cache(true);
  return {
    presets: [
      ["babel-preset-expo", { jsxImportSource: "nativewind" }],
      "nativewind/babel",
    ],
  };
};

================
File: loup-garou-frontend/global.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: loup-garou-frontend/metro.config.js
================
const { getDefaultConfig } = require("expo/metro-config");
const { withNativeWind } = require('nativewind/metro');
const config = getDefaultConfig(__dirname)
module.exports = withNativeWind(config, { input: './global.css' })

================
File: loup-garou-frontend/nativewind-env.d.ts
================
/// <reference types="nativewind/types" />

// NOTE: This file should not be edited and should be committed with your source code. It is generated by NativeWind.

================
File: loup-garou-frontend/notes.txt
================
L'alert pour commencer le segment des loups garou ne marche pas
j'ai implementer une fonction emit test dans le frontend directement mais ca ne trigger pas
je ne sais pas pourquoi

================
File: loup-garou-frontend/package.json
================
{
  "name": "loup-garou-frontend",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "axios": "^1.7.9",
    "expo": "~52.0.23",
    "expo-blur": "~14.0.1",
    "expo-constants": "~17.0.3",
    "expo-font": "~13.0.2",
    "expo-haptics": "~14.0.0",
    "expo-linking": "~7.0.3",
    "expo-router": "~4.0.15",
    "expo-splash-screen": "~0.29.18",
    "expo-status-bar": "~2.0.0",
    "expo-symbols": "~0.2.0",
    "expo-system-ui": "~4.0.6",
    "expo-web-browser": "~14.0.1",
    "nativewind": "^4.1.23",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.5",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "^4.14.1",
    "react-native-screens": "~4.4.0",
    "react-native-web": "~0.19.13",
    "react-native-websocket": "^1.0.2",
    "react-native-webview": "13.12.5",
    "socket.io-client": "^4.8.1",
    "tailwindcss": "^3.4.17"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.2",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}

================
File: loup-garou-frontend/README.md
================
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
    npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.
# loup-garou

================
File: loup-garou-frontend/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./app/**/*.{js,jsx,ts,tsx}", 
"./components/**/*.{js,jsx,ts,tsx}"],
  presets: [require("nativewind/preset")],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: loup-garou-frontend/tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts",
    "nativewind-env.d.ts"
  ]
}

================
File: loup-garou-frontend/types.ts
================
export type Player = {
  name: string;
  sid: string;
  role: string;
};

================
File: README.md
================
# loup-garou

Jeu du loup-garou pour jouer avec la famille sans avoir besoin de narrateur.

Expo pour frontend
Flask pour backend
